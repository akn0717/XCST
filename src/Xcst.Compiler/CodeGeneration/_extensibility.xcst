<?xml version="1.0" encoding="utf-8" ?>
<!--
 Copyright 2021 Max Toro Q.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<module version='1.0' language='C#'
   xmlns='http://maxtoroq.github.io/XCST'
   xmlns:xcst='https://maxtoroq.github.io/XCST/grammar'
   xmlns:code='https://maxtoroq.github.io/XCST/code'
   xmlns:src='https://maxtoroq.github.io/XCST/compiled'>

   <import-namespace ns='System.Collections.Generic'/>
   <import-namespace ns='System.Linq'/>
   <import-namespace ns='System.Xml.Linq'/>
   <import-namespace ns='Xcst.PackageModel'/>

   <param name='src_extensions' as='Dictionary&lt;System.Uri, IXcstPackage>?'/>

   <variable name='src_ext_pkg_params' value='new {
      src_base_types,
      src_doc_output = (System.Func&lt;XObject?, XElement?, XElement>)src_doc_output,
      src_output_is_doc = (System.Func&lt;XElement, bool>)src_output_is_doc,
      src_helper_type = (System.Func&lt;string, XElement>)src_helper_type,
      src_line_number,
      src_sequence_constructor
   }'/>

   <variable name='src_line_number'>
      <delegate>
         <param name='el' as='XElement' required='yes'/>

         <call-template name='src:line-number'>
            <with-param name='el' value='el'/>
         </call-template>
      </delegate>
   </variable>

   <variable name='src_sequence_constructor'>
      <delegate>
         <param name='el' as='XElement' required='yes'/>

         <call-template name='src:sequence-constructor'>
            <with-param name='el' value='el'/>
         </call-template>
      </delegate>
   </variable>

   <function name='xcst_is_extension_instruction' as='bool'>
      <param name='el' as='XElement'/>

      <variable name='extensionNamespaces' as='string[]'>
         <variable name='extNs' as='string[]'>
            <for-each name='extAttr' in='el.AncestorsAndSelf()
                  .Select(p => (p.Name.Namespace == c) ?
                     p.Attribute("extension-element-prefixes")
                     : p.Attribute(c + "extension-element-prefixes"))
                  .Where(p => p != null)'>
               <for-each name='n' in='tokenize(extAttr!.Value)'>
                  <variable name='@default' value='n == "#default"'/>
                  <variable name='prefix' value='(@default) ? "" : xcst_ncname(extAttr, n, false)'/>
                  <variable name='ns' value='namespace_uri_for_prefix(prefix, el)'/>
                  <if test='!(ns != null)'>
                     <message terminate='yes' error-code='XTSE1430' error-data='src_error_object(el)' expand-text='yes' transform-text='trim'>
                        {(@default ? "Default namespace" : $"Namespace prefix '{prefix}'")} has not been declared.
                     </message>
                  </if>
                  <object value='ns'/>
               </for-each>
            </for-each>
         </variable>
         <object value='extNs.Distinct()'/>
      </variable>
      <return value='extensionNamespaces.Contains(el.Name.Namespace.NamespaceName)'/>
   </function>

   <template name='src:extension-instruction'>
      <param name='el' as='XElement' required='yes'/>
      <param name='currentMode' as='XName' required='yes'/>

      <variable name='extPkg' value='ExtensionPackage(el)'/>
      <choose>
         <when test='extPkg != null'>
            <invoke-package package='extPkg'
               package-params='src_ext_pkg_params'
               initial-match-selection='el'
               initial-mode='{xcst_uri_qualified_name(currentMode)}'
               tunnel-passthru='yes'/>
         </when>
         <when test='el.Elements(c + "fallback").ToArray() is var fbEls
               &amp;&amp; fbEls.Length > 0'>
            <for-each name='fb' in='fbEls'>
               <call-template name='xcst:validate-attribs'>
                  <with-param name='el' value='fb'/>
               </call-template>
               <call-template name='src:sequence-constructor'>
                  <with-param name='el' value='fb'/>
               </call-template>
            </for-each>
         </when>
         <otherwise>
            <message terminate='yes' error-code='XTDE1450' error-data='src_error_object(el)' transform-text='trim'>
               Unknown extension instruction.
            </message>
         </otherwise>
      </choose>
   </template>

   <template name='xcst:extension-instruction' as='XElement?'>
      <param name='el' as='XElement' required='yes'/>

      <variable name='extPkg' value='ExtensionPackage(el)'/>
      <if test='extPkg != null
            &amp;&amp; HasMode&lt;XElement?>(extPkg, xcst + "extension-instruction")'>
         <invoke-package package='extPkg'
            package-params='src_ext_pkg_params'
            initial-match-selection='el'
            initial-mode='xcst:extension-instruction'
            tunnel-passthru='yes'/>
      </if>
      <on-empty value='(XElement?)null'/>
   </template>


   <!-- ## Package Extensions -->

   <template name='src:import-namespace-extra'>
      <param name='el' as='XElement' required='yes'/>

      <if test='src_extensions != null'>
         <for-each name='pair' in='src_extensions.Where(p => HasTemplate&lt;XElement?>(p.Value, src + "import-namespace-extra"))'>
            <invoke-package package='pair.Value'
               package-params='src_ext_pkg_params'
               initial-template='src:import-namespace-extra'
               template-params='new { el }'
               tunnel-passthru='yes'/>
         </for-each>
      </if>
   </template>

   <template name='src:package-attribute-extra'>
      <param name='el' as='XElement' required='yes'/>

      <if test='src_extensions != null'>
         <for-each name='pair' in='src_extensions.Where(p => HasTemplate&lt;XElement?>(p.Value, src + "package-attribute-extra"))'>
            <invoke-package package='pair.Value'
               package-params='src_ext_pkg_params'
               initial-template='src:package-attribute-extra'
               template-params='new { el }'
               tunnel-passthru='yes'/>
         </for-each>
      </if>
   </template>

   <template name='src:base-types'>
      <param name='el' as='XElement' required='yes'/>

      <if test='src_extensions != null'>
         <for-each name='pair' in='src_extensions.Where(p => HasTemplate&lt;XElement?>(p.Value, src + "base-types"))'>
            <invoke-package package='pair.Value'
               package-params='src_ext_pkg_params'
               initial-template='src:base-types'
               template-params='new { el }'
               tunnel-passthru='yes'/>
            <break/>
         </for-each>
      </if>
   </template>

   <template name='src:infrastructure-extra'>
      <param name='el' as='XElement' required='yes'/>

      <if test='src_extensions != null'>
         <for-each name='pair' in='src_extensions.Where(p => HasTemplate&lt;XElement?>(p.Value, src + "infrastructure-extra"))'>
            <invoke-package package='pair.Value'
               package-params='src_ext_pkg_params'
               initial-template='src:infrastructure-extra'
               template-params='new { el }'
               tunnel-passthru='yes'/>
         </for-each>
      </if>
   </template>

   <template name='src:type-attribute-extra'>
      <param name='el' as='XElement' required='yes'/>

      <if test='src_extensions != null'>
         <for-each name='pair' in='src_extensions.Where(p => HasTemplate&lt;XElement?>(p.Value, src + "type-attribute-extra"))'>
            <invoke-package package='pair.Value'
               package-params='src_ext_pkg_params'
               initial-template='src:type-attribute-extra'
               template-params='new { el }'
               tunnel-passthru='yes'/>
         </for-each>
      </if>
   </template>

   <template name='src:member-attribute-extra'>
      <param name='el' as='XElement' required='yes'/>

      <if test='src_extensions != null'>
         <for-each name='pair' in='src_extensions.Where(p => HasTemplate&lt;XElement?>(p.Value, src + "member-attribute-extra"))'>
            <invoke-package package='pair.Value'
               package-params='src_ext_pkg_params'
               initial-template='src:member-attribute-extra'
               template-params='new { el }'
               tunnel-passthru='yes'/>
         </for-each>
      </if>
   </template>


   <!-- ## Instructions -->

   <template match='XElement el &amp;&amp; el.Name == c + "fallback"' mode='src:statement src:expression'>
      <call-template name='xcst:validate-attribs'>
         <with-param name='el' value='el'/>
      </call-template>
   </template>

   <template match='XElement el &amp;&amp; el.Name == c + "script"' mode='src:statement'>

      <call-template name='xcst:validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='optional' value='new[] { "src" }'/>
      </call-template>

      <call-template name='xcst:text-only'>
         <with-param name='el' value='el'/>
      </call-template>

      <variable name='text' value='xcst_text(el)'/>
      <variable name='srcAttr' value='el.Attribute("src")'/>

      <choose>
         <when test='text != null'>
            <if test='!(srcAttr is null)'>
               <message terminate='yes' error-code='XTSE0010' error-data='src_error_object(el)' transform-text='trim'>
                  The 'src' attribute must be omitted if the element has content.
               </message>
            </if>
            <code:script>
               <call-template name='src:line-number'>
                  <with-param name='el' value='el'/>
               </call-template>
               <value-of value='text'/>
            </code:script>
         </when>
         <when test='srcAttr != null'>
            <variable name='src' value='resolve_uri(xcst_uri(srcAttr)!, el.BaseUri)'/>
            <variable name='script' value='unparsed_text(src)'/>
            <if test='!(script != null)'>
               <message terminate='yes' error-data='src_error_object(el)' transform-text='trim'>
                  Cannot retrieve script.
               </message>
            </if>
            <code:script>
               <call-template name='src:line-number'>
                  <with-param name='el' value='el'/>
                  <with-param name='lineUri' value='src' tunnel='yes'/>
                  <with-param name='lineNumberOffset' value='(LineNumber(el) * -1) + 1' tunnel='yes'/>
               </call-template>
               <value-of value='script'/>
            </code:script>
         </when>
      </choose>
   </template>

   <template match='XElement el &amp;&amp; el.Name == c + "script"' mode='xcst:instruction'>
      <xcst:instruction void='true'/>
   </template>

</module>
